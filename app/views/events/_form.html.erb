<%= form_for @event, validate: true, html: { multipart: true } do |f| %>
	<div class="WidFlo center background900 Write20"><%= @event.errors.full_messages.to_sentence %></div>
  <div class="input_container">
    <div class="label"><%= f.label :title %></div>
    <div id="WidFlo">
      <%= f.text_field :title, maxlength: 25 %>
    </div>
  </div>

  <div class="input_container">
    <div class="label"><%= f.label :description %></div>
    <div id="WidFlo">
      <%= f.text_area :description %>
    </div>
  </div>

  <div class="input_container">
    <div class="label"><%= f.label :prizes %></div>
    <div id="WidFlo">
      <%= f.text_area :prizes %>
    </div>
  </div>

  <div class="input_container">
    <div class="label"><%= f.label :rules %></div>
    <div id="WidFlo">
      <%= f.text_area :rules %>
    </div>
  </div>

  <div class="input_container">
    <div class="label"><%= f.label :start_date %></div>
    <div id="WidFlo">
      <%= f.text_field :start_date, data: { datetime_picker: true } %>
    </div>
  </div>

  <div class="input_container">
    <div class="label"><%= f.label :end_date %></div>
    <div id="WidFlo">
      <%= f.text_field :end_date, data: { datetime_picker: true } %>
    </div>
  </div>

  <div class="input_container">
    <div class="label"><%= f.label :website %></div>
    <div id="WidFlo">
      <%= f.url_field :website %>
    </div>
  </div>

  <div class="input_container">
    <div class="label"><%= f.label :screen %></div>
    <div id="WidFlo">
      <%= f.file_field :screen %>
    </div>
  </div>

  <div class="input_container">
    <div class="label"><%= t('.type') %></div>
    <div id="WidFlo">
      <% Event.event_types.keys.each do |event_type| %>
        <%= f.radio_button :event_type, event_type, id: "event_#{event_type}" %>
        <%= f.label event_type.to_sym %>
      <% end %>
    </div>
  </div>

  <div class="input_container">
    <div class="label"><%= t('.language') %></div>
    <div id="WidFlo">
      <%= f.collection_check_boxes :language_ids, Language.all, :id, :name do |cb| %>
        <%= cb.label do %>
          <%= image_tag "Images/flags/#{cb.object.locale}.jpg" %>
          <% if @event.new_record? %>
            <%= cb.check_box checked: (I18n.locale.to_s == cb.object.locale) %>
          <% else %>
            <%= cb.check_box %>
          <% end %>
        <% end %>
      <% end %>
    </div>
  </div>

  <!-- Google Maps -->
<!--   <div class="input_container">
    <div class="label">Place</div>
      <div id="WidFlo">
        <%#= f.text_field :position, class: "controls", id: 'pac-input', style: 'width: 300px; background-color: #0c1925;' %>
        <%#= f.hidden_field :latitude %>
        <%#= f.hidden_field :longitude %>
        <div id="map" style="height:500px;"></div>
      </div>
    <script>
      // This example adds a search box to a map, using the Google Place Autocomplete
      // feature. People can enter geographical searches. The search box will return a
      // pick list containing a mix of places and predicted search terms.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
      // Our api is : indiexpo-142610

      function initAutocomplete() {
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: -33.8688, lng: 151.2195},
          zoom: 13,
          mapTypeId: 'roadmap'
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDw4M5cTO6m97T2tpSPkx3XJ4G3a69LgDQ&libraries=places&callback=initAutocomplete" async defer></script>
  </div>-->
  <!-- End Google Map -->

  <%= f.button t('.publish'), class: 'Botton' %>
<% end %>
